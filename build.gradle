buildscript {
    ext.versions = [
            // Virgil
            virgilSdk  : '5.0.5',
            pythia     : '0.2.0',
            keyknox    : '0.1.1',

            // Kotlin
            kotlin     : '1.3.10',
            coroutines : '1.0.1',

            // Gradle
            gardle     : '3.2.1',

            // Android
            android    : '4.1.1.4',

            // Docs
            dokka      : '0.9.17',

            // Tests
            junit      : '4.12',
            testsRunner: '1.0.2',
            espresso   : '3.0.2',
    ]
    repositories {
        google()
        jcenter()
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$versions.gardle"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$versions.dokka"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenLocal()
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// Default value is ALL
enum ArtifactType {
    ALL,
    STANDARD,
    COROUTINES
}

static String getArtifactType(Project project) {
    def systemProperty = null
    if (System.getenv('ARTIFACT_TYPE') != null)
        systemProperty = System.getenv('ARTIFACT_TYPE')
    if (System.getProperty('ARTIFACT_TYPE') != null)
        systemProperty = System.getProperty('ARTIFACT_TYPE')

    if (systemProperty != null)
        return systemProperty
    else if (project.hasProperty('ARTIFACT_TYPE')) {
        return project.findProperty('ARTIFACT_TYPE')
    } else {
        return ArtifactType.ALL
    }
}

task installEthree() {
    def artifactType
    try {
        artifactType = getArtifactType(project) as ArtifactType
    } catch (IllegalArgumentException ignored) {
        throw new IllegalArgumentException("Please, choose one of the available types: " + ArtifactType.values() + "."
                + " You entered: " + getArtifactType(project))
    }

    if (artifactType == ArtifactType.STANDARD) {
        dependsOn ':common:install', ':ethree:install'
    } else if (artifactType == ArtifactType.COROUTINES) {
        dependsOn ':common:install', ':ethreeCoroutines:install'
    } else if (artifactType == ArtifactType.ALL) {
        dependsOn ':common:install', ':ethree:install', ':ethreeCoroutines:install'
    } else {
        throw new IllegalArgumentException("Please, choose one of artifacts type: " + ArtifactType.values())
    }
}

task publishEthree() {
    def artifactType
    try {
        artifactType = getArtifactType(project) as ArtifactType
    } catch (IllegalArgumentException ignored) {
        throw new IllegalArgumentException("Please, choose one of the available types: " + ArtifactType.values() + "."
                + " You entered: " + getArtifactType(project))
    }

    if (artifactType == ArtifactType.STANDARD) {
        dependsOn ':common:publish', ':ethree:publish'
    } else if (artifactType == ArtifactType.COROUTINES) {
        dependsOn ':common:publish', ':ethreeCoroutines:publish'
    } else if (artifactType == ArtifactType.ALL) {
        dependsOn ':common:publish', ':ethree:publish', ':ethreeCoroutines:publish'
    } else {
        throw new IllegalArgumentException("Please, choose one of artifacts type: " + ArtifactType.values())
    }
}
