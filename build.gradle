/*
 * Copyright (c) 2015-2020, Virgil Security, Inc.
 *
 * Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     (1) Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *     (2) Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *     (3) Neither the name of virgil nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

buildscript {
    ext.kotlin_version = '1.3.61'

    ext.versions = [
            // Virgil
            virgilSdk       : '7.1.0',
            virgilCrypto    : '0.12.0',
            pythia          : '0.3.3',
            ratchet         : '0.1.1',

            // Kotlin
            kotlin          : '1.3.61',
            coroutines      : '1.3.3',

            // Gradle
            gradle          : '3.5.3',

            // Maven
            mavenPublish    : '3.6.2',

            // Android
            android         : '4.1.1.4',
            appCompat       : '1.1.0',

            // Room
            room            : '2.2.3',

            // Docs
            dokka           : '0.9.18',

            // Tests
            junit           : '4.12',
            testsRunner     : '1.1.1',
            espresso        : '3.0.2',
            virgilTestCommon: '0.1',

            // Benchmark
            androidBenchmark: '1.0.0',
    ]
    ext.androidOptions = [
            compileSdkVersion   : 28,
            minSdkVersionEnclave: 23,
            minSdkVersionRegular: 21,
            targetSdkVersion    : 28,
            buildToolsVersion   : "28.0.3"
    ]
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$versions.gradle"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$versions.dokka"
        classpath "digital.wup:android-maven-publish:$versions.mavenPublish"
        classpath "androidx.benchmark:benchmark-gradle-plugin:$versions.androidBenchmark"

    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
}

// Artifacts packages
final String BASE_VIRGIL_PACKAGE = 'com.virgilsecurity'

// Packages versions
final String SDK_VERSION = '0.8.0'

subprojects {
    group BASE_VIRGIL_PACKAGE
    version SDK_VERSION

    def isRegular = (it.name == 'ethree-common'
            || it.name == 'ethree-kotlin'
            || it.name == 'ethree-enclave')
    def isTest = (it.name == 'tests' || it.name == 'testsenclave')
    def isBenchmark = (it.name == 'ethree-benchmark')

    if (isRegular) {
        apply plugin: 'com.android.library'
        apply plugin: 'digital.wup.android-maven-publish'
        apply plugin: 'org.jetbrains.dokka'
        apply plugin: 'signing'
        apply plugin: 'maven-publish'
    } else if (isTest) {
        apply plugin: 'com.android.application'
        apply from: '../tests-verbal-output.gradle'
    } else if (isBenchmark) {
        apply plugin: 'com.android.library'
    }

    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-android-extensions'

    if (it.name == 'ethree-common') {
        apply from: '../tests-verbal-output.gradle'
        apply plugin: 'kotlin-kapt'
    }

    android {
        compileSdkVersion androidOptions.compileSdkVersion
        buildToolsVersion androidOptions.buildToolsVersion

        defaultConfig {
            targetSdkVersion androidOptions.targetSdkVersion
        }
        buildTypes {
            debug {
                minifyEnabled false
            }
            release {
                minifyEnabled false
            }
        }
        lintOptions {
            abortOnError false
        }
    }

    sourceCompatibility = "8"
    targetCompatibility = "8"

    if (isRegular) {
        task sourcesJar(type: Jar) {
            from(project.android.sourceSets.main.java.srcDirs)
            classifier = 'sources'
        }

        task javadocJar(type: Jar, dependsOn: 'dokka') {
            from("$buildDir/javadoc")
            classifier = 'javadoc'
        }

        def authentication_username = hasProperty('authentication_username') ? authentication_username : System.getenv('authentication_username')
        def authentication_password = hasProperty('authentication_password') ? authentication_password : System.getenv('authentication_password')

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    artifact javadocJar
                    artifact sourcesJar
                    from components.android

                    pom {
                        description = 'Virgil Security provides an SDK which symplifies work with Virgil services and presents easy to use API for adding security to any application. In a few simple steps you can setup user encryption with multidevice support.'
                        url = 'https://www.virgilsecurity.com/'
                        licenses {
                            license {
                                name = 'Virgil Security, Inc. license'
                                url = 'https://github.com/VirgilSecurity/virgil-e3kit-kotlin/blob/master/LICENSE.txt'
                            }
                        }
                        developers {
                            developer {
                                id = 'BuddahLD'
                                name = 'Danylo Oliinyk'
                                email = 'doliinyk@virgilsecurity.com'
                                organizationUrl = 'https://github.com/BuddahLD'
                            }
                            developer {
                                id = 'andrii-iakovenko'
                                name = 'Andrii Iakovenko'
                                email = 'andrii-iakovenko@gmail.com'
                                organizationUrl = 'https://github.com/andrii-iakovenko'
                            }
                        }
                        scm {
                            connection = 'scm:git:https://github.com/VirgilSecurity/virgil-e3kit-kotlin.git'
                            developerConnection = 'scm:git:git@github.com:VirgilSecurity/virgil-e3kit-kotlin.git'
                            url = 'https://github.com/VirgilSecurity/virgil-e3kit-kotlin'
                        }
                    }
                }
            }

            repositories {
                maven {
                    def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                    def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                    credentials {
                        username "${authentication_username}"
                        password "${authentication_password}"
                    }
                }
            }
        }

        signing {
            sign publishing.publications.mavenJava
        }

        dokka {
            outputFormat = 'html'
            outputDirectory = "$buildDir/javadoc"
            reportUndocumented = false
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
