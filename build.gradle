buildscript {
    ext.versions = [
            virgilSdk: '5.0.4',
            kotlin   : '1.2.71',
            coroutines   : '0.30.2',
            klaxon   : '3.0.5',
            junit    : '5.2.0',
            dokka    : '0.9.17'
    ]

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${versions.dokka}"
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group 'com.virgilsecurity'
version '0.1.0'

apply plugin: 'kotlin'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'maven'
apply plugin: 'org.jetbrains.dokka'

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
}

dependencies {
    // JDK
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"

    // Virgil
    implementation "com.virgilsecurity.sdk:crypto:$versions.virgilSdk"
    implementation "com.virgilsecurity.sdk:sdk:$versions.virgilSdk"
    implementation ('com.virgilsecurity:pythia:0.2.0') {
        exclude group: 'com.virgilsecurity.sdk', module: 'crypto'
    }
    implementation ('com.virgilsecurity:keyknox:0.1.0') {
        exclude group: 'com.virgilsecurity.sdk', module: 'crypto'
    }

    // Tests
    testCompile "org.junit.jupiter:junit-jupiter-api:$versions.junit"
    testRuntime("org.junit.jupiter:junit-jupiter-engine:$versions.junit")
}

sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

junitPlatformTest {
    systemProperty 'APP_ID', System.getProperty('APP_ID')
    systemProperty 'API_PRIVATE_KEY', System.getProperty('API_PRIVATE_KEY')
    systemProperty 'API_PUBLIC_KEY', System.getProperty('API_PUBLIC_KEY')
    systemProperty 'API_PUBLIC_KEY_ID', System.getProperty('API_PUBLIC_KEY_ID')
}

task sourcesJar(type: Jar) {
    from(sourceSets["main"].allSource)
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: 'dokka') {
    from "$buildDir/javadoc"
    classifier = 'javadoc'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'e2ee'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'Virgil E2EE Java/Kotlin/Android SDK'
                description = 'Virgil Security provides an SDK which allows you to easily implement End to End Encrypted messenger.'
                url = 'https://www.virgilsecurity.com/'
                licenses {
                    license {
                        name = 'Virgil Security, Inc. license'
                        url = 'https://github.com/VirgilSecurity/e2ee-kotlin/blob/master/LICENSE.txt'
                    }
                }
                developers {
                    developer {
                        id = 'BuddahLD'
                        name = 'Danylo Oliinyk'
                        email = 'doliinyk@virgilsecurity.com'
                        organizationUrl = 'https://github.com/BuddahLD'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/VirgilSecurity/e2ee-kotlin.git'
                    developerConnection = 'scm:git:git@github.com:VirgilSecurity/e2ee-kotlin.git'
                    url = 'https://github.com/VirgilSecurity/e2ee-kotlin'
                }
            }
        }
    }
    
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
//                username "${authentication_username}"
//                password "${authentication_password}"
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
    reportUndocumented = false
}
