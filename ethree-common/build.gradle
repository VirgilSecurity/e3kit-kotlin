/*
 * Copyright (c) 2015-2019, Virgil Security, Inc.
 *
 * Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     (1) Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *     (2) Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *     (3) Neither the name of virgil nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

plugins {
    id 'signing'
    id 'maven-publish'
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply plugin: 'digital.wup.android-maven-publish'
apply plugin: 'org.jetbrains.dokka'

group 'com.virgilsecurity'
version '0.5.0-beta1'

def APP_ID = hasProperty('APP_ID') ? APP_ID : System.getenv('APP_ID')
def API_PRIVATE_KEY = hasProperty('API_PRIVATE_KEY') ? API_PRIVATE_KEY : System.getenv('API_PRIVATE_KEY')
def API_PUBLIC_KEY = hasProperty('API_PUBLIC_KEY') ? API_PUBLIC_KEY : System.getenv('API_PUBLIC_KEY')
def API_PUBLIC_KEY_ID = hasProperty('API_PUBLIC_KEY_ID') ? API_PUBLIC_KEY_ID : System.getenv('API_PUBLIC_KEY_ID')
def VIRGIL_BASE_URL = hasProperty('VIRGIL_BASE_URL') ? VIRGIL_BASE_URL : System.getenv('VIRGIL_BASE_URL')

android {
    compileSdkVersion androidOptions.compileSdkVersion
    buildToolsVersion androidOptions.buildToolsVersion

    defaultConfig {
        minSdkVersion androidOptions.minSdkVersionRegular
        targetSdkVersion androidOptions.targetSdkVersion
        consumerProguardFiles 'proguard-rules.txt'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"]
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            minifyEnabled false
            useProguard false
        }
        release {
            minifyEnabled false
            useProguard false
        }
        buildTypes.each {
            it.buildConfigField "String", "APP_ID", "$APP_ID"
            it.buildConfigField "String", "API_PRIVATE_KEY", "$API_PRIVATE_KEY"
            it.buildConfigField "String", "API_PUBLIC_KEY", "$API_PUBLIC_KEY"
            it.buildConfigField "String", "API_PUBLIC_KEY_ID", "$API_PUBLIC_KEY_ID"
            it.buildConfigField "String", "VIRGIL_BASE_URL", "$VIRGIL_BASE_URL"
        }
    }
}

dependencies {
    // Kotlin
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlin"
    compileOnly "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.coroutines"

    // Virgil Crypto
    implementation "com.virgilsecurity.crypto:pythia-android:$versions.virgilCrypto"

    // Virgil SDK
    api "com.virgilsecurity.sdk:crypto-android:$versions.virgilSdk"

    api "com.virgilsecurity:common:$versions.virgilSdk"
    api("com.virgilsecurity.sdk:sdk:$versions.virgilSdk") {
        exclude group: 'com.virgilsecurity.crypto'
    }
    api("com.virgilsecurity.sdk:keyknox:$versions.virgilSdk") {
        exclude group: 'com.virgilsecurity.sdk', module: "sdk"
    }
    api("com.virgilsecurity:pythia:$versions.pythia") {
        exclude group: 'com.virgilsecurity.crypto'
        exclude group: 'com.virgilsecurity.sdk'
    }

    // Android
    compileOnly "com.google.android:android:$versions.android"

    // Room
    implementation "androidx.room:room-runtime:$versions.room"
    implementation "androidx.room:room-ktx:$versions.room"
    kapt "androidx.room:room-compiler:$versions.room"

    // Tests core
    testImplementation "junit:junit:$versions.junit"
    androidTestImplementation "androidx.test.ext:junit:$versions.testsRunner"
    androidTestImplementation "androidx.test:runner:$versions.testsRunner"

    // Test internal
    androidTestImplementation project(':ethree-kotlin')
}

task generateVersionVirgilAgent {
    outputs.dir "$buildDir/generated"
    doFirst {
        def versionFile = file("$buildDir/generated/release/com/virgilsecurity/android/common/build/VersionVirgilAgent.kt")
        versionFile.parentFile.mkdirs()
        versionFile.text =
                """
package com.virgilsecurity.android.common.build;

object VersionVirgilAgent {
    const val VERSION = "$project.version"
}
"""
    }
}

project.android.sourceSets.main.java.srcDirs = ["${buildDir}/generated/release/", "src/main/java"]

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    dependsOn(generateVersionVirgilAgent)
}

sourceCompatibility = "8"
targetCompatibility = "8"

task sourcesJar(type: Jar) {
    from(project.android.sourceSets.main.java.srcDirs)
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: 'dokka') {
    from("$buildDir/javadoc")
    classifier = 'javadoc'
}

def authentication_username = hasProperty('authentication_username') ? authentication_username : System.getenv('authentication_username')
def authentication_password = hasProperty('authentication_password') ? authentication_password : System.getenv('authentication_password')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'ethree-common'
            from components.android
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'Virgil E3Kit Kotlin Common'
                description = 'Virgil Security provides an SDK which symplifies work with Virgil services and presents easy to use API for adding security to any application. In a few simple steps you can setup user encryption with multidevice support.'
                url = 'https://www.virgilsecurity.com/'
                licenses {
                    license {
                        name = 'Virgil Security, Inc. license'
                        url = 'https://github.com/VirgilSecurity/virgil-e3kit-kotlin/blob/master/LICENSE.txt'
                    }
                }
                developers {
                    developer {
                        id = 'BuddahLD'
                        name = 'Danylo Oliinyk'
                        email = 'doliinyk@virgilsecurity.com'
                        organizationUrl = 'https://github.com/BuddahLD'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/VirgilSecurity/virgil-e3kit-kotlin.git'
                    developerConnection = 'scm:git:git@github.com:VirgilSecurity/virgil-e3kit-kotlin.git'
                    url = 'https://github.com/VirgilSecurity/virgil-e3kit-kotlin'
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username "${authentication_username}"
                password "${authentication_password}"
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
    reportUndocumented = false
}
